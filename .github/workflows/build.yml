name: Build

on:
  push:
    branches: [ "master", "develop" ]
    tags:
      - '*'
  pull_request:
    branches: [ "master", "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4.5.0
      with:
        python-version: 3.11
        cache: pip
        architecture: x64

    - name: Python Depdendeicnes
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install -r ${{github.workspace}}/requirements.txt

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        # Artifact name
        name: Display Lock
        path: ${{github.workspace}}/build/src/release/Display-Lock.exe

  deploy:
    needs: build
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
      name: get release
      uses: actions/download-artifact@v4.1.7
      with:
        name: Display Lock
        path: ${{github.workspace}}/build/src/release

    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
      name: check releases
      run: ls ${{github.workspace}}/build/src/release

    - if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
      name: Create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{github.workspace}}/build/src/release/Display-Lock.exe"
        bodyFile: "${{github.workspace}}/CHANGELOG.md"
